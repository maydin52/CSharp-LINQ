//LINQ(Language Integrated Query)

//C# 3.0 .Net 3.5
//3 yöntemle gelmiştir. 
//LINQ to Object
//LINQ to SQL
//LINQ to XML

//Data != Object
//Data : verinin saklandığı yer, tablo mantığı. Object : Veriyi kullandığım ortam OOP. Objeyi tabloya çevirmemiz gerekiyor.
//Biz güncel durumda hangi dillerde yazılım yazbiliriz? c# Python java vs
//Bunların ortak özellikleri ne? OOP olması
//Bu üretilen veri nerede saklanacak? RDBS sql server, oracle vs.
//Bu saklanan yerlerin ortak özellikleri ne? İlişkisel olması.
//Problem şu ki bunların ikisi arasında eşitsizlik var.
//Bu sorunun ortaya çıkardığı bütün problemler ne zaman OOP veritabanlarına geçilirse o zaman çözülür. Dünyada bazı örnekleri var. Yaygın değil.

//Verileri onje haline getirme işleminde yardımcı oluyor.
//Hemde bu obje haline getirilmiş veriler üzerinde sql sorguları gibi sorgular yazmamızı sağlıyor.

//------------------------------------------------------------------------------------------------------------------------

//LINQ için gelen yenilikler...

//1-var
//2-auto property
//3-object initializer
//4-collection initializer
//5-Anonymous Type
//6-Extension methods
//7-Expression Tree
//8-Lambda Expression

//------------------------------------------------------------------------------------------------------------------------

//1-var

//var: Gecici olarak tanımlanan, degiskene ilk deger geldiginde asıl tip olusur...

//*** Tip bir kez olustugunda sonradan değiştirilemez...

//*** Gercekte var diye bir tip yok... Buraya bir değer gelecek ama şuanda bunu bilmiyorum.

var d1 = "Merhaba";
var d2 = 12;
var d3 = 'A';
var d4 = 55.90;
var d5 = 43L;
var d6 = 12.99F;
var d7 = 33.50M;
var d8 = new Object();

//d1 = 12;

//C# 4.0 => dynamic
dynamic d10 = "Merhaba";
d10 = 123;
d10 = 'a';
d10 = true;

//object d11 = 12;
//int sayi = d11;

// objeden inn tip dönüşümü yapılması gerekiyor.

dynamic d12 = 12;
int sayi2 = d12;

// dynamic te tip dönüşümü yapmanıza gerek kalmıyor. Dönüşüm otomatik yapılıyor. yukarıdakiyle arasındaki fark bu.

// o zaman biz int yerine dynamic yazalım geçelim olmaz. stack daha hızlı çalışır. performanslı değil. MVC viewbag nesnesi tipi dynamic orada karşımıza çıkacak. 
// Sorguyu yazma anında ne döneceğini bilmiyoruz. Sorgu sonucu belli olacağından var.

// C# tip bakımından strongled language type olduğundan dili esnetmek için var ve dynamic getirilmiştir.

//------------------------------------------------------------------------------------------------------------------------

//2-Auto Property

internal class Personel
    {
        public int PerID { get; set; }
        public string Ad { get; set; }
        public string Soyad { get; set; }
    }


Avantajı : herbirisine ayrı ayrı değişken tanımlayıp get ve set metotlarını yazmaktan kurtulduk.
Sistem backing field leri kendisi oluşturyor.

//------------------------------------------------------------------------------------------------------------------------

//3-Object Init.

// Constructor yazmamış olsakta aşağıdaki şekilde kullanabiliyoruz.

internal class Personel
    {
        public int PerID { get; set; }
        public string Ad { get; set; }
        public string Soyad { get; set; }
    }

Personel personel = new Personel { PerID=1, Ad="Cevdet",  Soyad="Dursun" };

//------------------------------------------------------------------------------------------------------------------------

// -Property Init.
//Sıralamada yoktu ama sonradan hoca derste söyledi.

public static List<Kategori> Kategoriler { get; set; } = new List<Kategori> { 
           new Kategori{ KategoriID=1, KategoriAdi="Kırtasiye" },
           new Kategori{ KategoriID=2, KategoriAdi="Hediyelik" },
           new Kategori{ KategoriID=3, KategoriAdi="Spor" }
        };

// Dikkat : en sonda ; konuluyor. Normalde prop sonrasında yoktu.

//------------------------------------------------------------------------------------------------------------------------

//4-Collection Init.

List<Personel> personeller = new List<Personel>() {
 new Personel { PerID=1, Ad="", Soyad=""},
 new Personel { PerID=2, Ad="", Soyad=""},
 new Personel { PerID=3, Ad="", Soyad=""},
 new Personel { PerID=4, Ad="", Soyad=""}
};

// Dikkat : ilk satırın sonundaki parantezler optional dır. Yazılmasa da olur.

//------------------------------------------------------------------------------------------------------------------------

//5-Anonymous Object(Type)

// NSA bir sınıf olusturmak icin onceden class tanımlaması yapmak gerekir...
// Anonim Tipler de ise boyle bir tanımlamaya gerek yoktur, dogrudan nesnenin ozellikleri {} içerisinde tanımlanır...

var musteri = new { ID = 1, Ad = "Dursun", Soyad = "Durak" };
dynamic urun = new { ID = 11, Ad = "sdd" };

Console.WriteLine(urun.ID);

Personellerin olduğu bir sınıftan personel tipi döner.
Bölümlerin olduğu bir sınıftan bölüm tipi döner.
Personellerin bölümleri için ???

view model oluşturacağız ilerde ya da sorguda Anonymous tip oluşturacağız.

//------------------------------------------------------------------------------------------------------------------------

//6-Extension Methods
// Onceden tanımlanmıs herhangi bir yapıya(class,struct,interface..) daha sonra ilave metodlar eklemek için kullanılır(source code tarafında değil...)
// LINQ nun kalbidir.
// 

internal static class Genisletme
    {
        //Extension metod olusturma kuralları...
        //1-static sınıf olusturulmalı...
        //2-yazılacak metod da static olmalı...
        //3-metodun ilk parametresinde this  keyword!u ile hangi yapıya metod eklenecekse o belirtilir... Eğer metodun başka parametresi varsa bu ifaden sonra yazılmalıdır...

        this birinci kullanım; class ın içinde,
        this ikinci kullanımı; const arasında veri transferi yapmak için,(aynı sınıfsa this, üst sınıfsa base i kullanıyoruz)
        this üçüncü kullanım yukarıdaki şekilde,

        //Ozel Durum: metodun ilk parametresi metod parametre listesinde gozukmez...

        //Bir sınıf static se member ları da statik olmalıdır. Ram de static bölgesinde tutulurlar.
        // sayi. yazıldığında açılan listede mor küp sembolü sol altında aşağıya bakan ok var ve metod imzasında (extension) yazar.

        // ismin hiçbir önemi yok. Nereye bağladığım önemli.

        public static int KareAl(this int sayi)
        {
            return sayi * sayi;
        }

        public static int KupAl(this int sayi)
        {
            return sayi * sayi*sayi;
        }

        public static int IkiyeBol(this int sayi)
        {
            return sayi /2;
        }

        public static int IstenilenSayiyaBol(this int sayi,int bolum)
        {
            return sayi / bolum;
           
        }
    }

//---------------

int sayi = 12;

sayi. dedikten sonra gelen listenin içine sonradan metot eklemek istiyoruz. Normal şartlar altında source kodunu değiştirmemiz gerekir.
Bunu herşeye bağlayabiliriz. (interface, class, struct vs..)

Console.WriteLine(sayi.KareAl());

Console.WriteLine(sayi.IstenilenSayiyaBol(3));

// namespace eklemeyi unutmuyoruz.

// Microsoft Enumerable diye bir class yazmış. Go to definition gittiğimizde; this ile Ienumerable içine ekle diyor.
// Ienumerable için daha önce; Foreach ; Ienumerable interface ini uygulamış olan metotlarda çalışır demiştik.

string[] isimler = { "Ali", "Veli", "Selami" };

// Örneğin;
// Bir sınıf yazdı ve sistemin içindeki bütün koleksiyonlara linq desteğini verdi. Tek satır orijinal kodu değiştirmeden bütün sisteme uyguladı.
// Bütün koleksiyonları Ienumarable interface i üzerinden extesion metodla bağlamış. definitondaki this e dikkat.
// isimler. yapınca oklu mor küplere dikkat :)
// Bütün koleksiyonların Ienumerable verilmesi.
// Yoksa teker teker bütün array, list vs bütün sınıflara yazmak zorundaydı, tek interface e bağladı ve hepsine verdi.

List<string> list = new List<string>();

//------------------------------------------------------------------------------------------------------------------------

//7-Expression Tree(Ifade agaci...)

LINQ sorguları iki şekilde yazılabilir;
1- SQL gibi fakat yerleri değişik bu yazılış şeklinde.
2- Extension method olarak.

Bizim için en önemli olanı extension method kullanımı.
İşte bu şekilde extension methodları peşpeşe bağlayarak çalıştırma işlemine Expression Tree deniyor.
Linq sorguları bu şekilde yazılır.
Console.WriteLine( sayi.IstenilenSayiyaBol(6).KareAl().KupAl().IkiyeBol());

//------------------------------------------------------------------------------------------------------------------------

//8-Lambda Expression...

MVC nin içerisinde eventler bölümünde anlatılacak.
Müfredatta ötelenmiş.
Delegeler konusunun da anlatılması gerekiyormuş.
2-3 saatlik bir anlatımı varmış.

List<int> sayilar = new List<int>() { 34, 5, 1, 656, 777 };

foreach (int s in sayilar)
{ 
     if(s % 2 == 1)
        Console.WriteLine(s);
}
 
 foreach(int s in sayilar.FindAll(x => x %2 == 1))
    Console.WriteLine(s);

// Find bir tane getirir, dikkat.

// => ero operatörü (ismini tekrar sor doğru mu yazdım?)

// fonksiyona giden parametreyi temsil ediyor.

 // () => {}
 // (x,y) => {}
 // x=>x (metoda x gider x çıkar) Birinci x parametre, ikinci x return - Lambda Expression - onlarca kullanım şekli var.

// Önemli konu. Çok kullanacağız. Herşeyi bu şekilde yazabiliyoruz.

